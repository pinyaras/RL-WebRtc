
####################
# Experiment Steps #
####################

This example experiment compares results
For two sets of outputs and trace file

#########
# Setup #
#########

Adjust the 'autoclose' value in both
config files to change the duration
that the app will run.

################
# Repositories #
################

Repositories (Challenge-Example, HRCC, Gemini)

# Lab Server
/home/lab/dev/rl_vdo

# Winslab Server
/home/champ/dev/rl_vdo

Each environment is set up with the appropriate
config files, bash scripts, and input media files

The BandwidthEstimator.py files have also been modified
To log outputs needed for generating the plots.

Run each experiment as described in the Demo section to
generate the "results.csv" output file.

##########################
# Local Vs. Network Test #
##########################

For local testing, both receiver and sender use the same Docker container

# receiver
docker run -d --network=host --rm -v `pwd`:/app -w /app --name alphartc_pyinfer opennetlab.azurecr.io/challenge-env peerconnection_serverless receiver_pyinfer.json

# sender
docker exec alphartc_pyinfer peerconnection_serverless sender_pyinfer.json

For network testing, receiver and sender each use the sever's local Docker container

# receiver
docker run -d --network=host --rm -v  `pwd`:/app -w /app --name alphartc_pyinfer opennetlab.azurecr.io/challenge-env peerconnection_serverless receiver_pyinfer.json

# sender
docker run -d --network=host --rm -v  `pwd`:/app -w /app --name alphartc_pyinfer opennetlab.azurecr.io/challenge-env peerconnection_serverless sender_pyinfer.json

####################
# Generating Plots #
####################

[STATUS: IN PROGRESS]
- collect the output files and trace data
- rename files for script input

# run script with path to log/trace files
python genPlots.py /path/to/files

For testing purposes, the genPlots.py expects a path as input
That path should contain two AlphaRTC output files to be compared

For now these are hard-coded as "GCC.log" and "RL.log"
The trace file is also expected, currently hard-coded as "TestCapacity.txt"
